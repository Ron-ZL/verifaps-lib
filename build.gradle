plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.41" apply false
    //id 'io.franzbecker.gradle-lombok' version '1.11' apply false
    id "com.github.hierynomus.license" version "0.14.0" apply false
    id "com.jfrog.bintray" version "1.7.3" apply false
    id 'com.palantir.git-version' version '0.10.1' apply false
    id "org.jetbrains.dokka" version "0.9.17"
}

dokka {

    // List of files with module and package documentation
    // http://kotlinlang.org/docs/reference/kotlin-doc.html#module-and-package-documentation

    includes = ['README.md']

    outputFormat = "html"
    outputDirectory = "$buildDir/dokka"

    // List of files with module and package documentation
    // http://kotlinlang.org/docs/reference/kotlin-doc.html#module-and-package-documentation
    samples = []

    // These tasks will be used to determine source directories and classpath
    kotlinTasks {
        //defaultKotlinTasks() + subprojects*.compileKotlin
        project(":smv-model").compileKotlin
    }

    sourceDirs = files('smv-model/src/main/kotlin') + \
             files("iec61131lang/src/main/kotlin") + \
             files("iec-symbex/src/main/kotlin") + \
             files("iec-run/src/main/kotlin") + \
             files("iec-xml/src/main/kotlin") + \
             files("flycheck/src/main/kotlin") + \
             files("casestudies/src/main/kotlin") + \
             files("iec-modularization/src/main/kotlin")

    // Use default or set to custom path to cache directory
    // to enable package-list caching
    // When set to default, caches stored in $USER_HOME/.cache/dokka
    cacheRoot = 'default'

    // Use to include or exclude non public members.
    includeNonPublic = true

    // Do not output deprecated members. Applies globally, can be overridden by packageOptions
    skipDeprecated = false

    // Emit warnings about not documented members. Applies globally, also can be overridden by packageOptions
    reportUndocumented = false

    skipEmptyPackages = false // Do not create index pages for empty packages

    impliedPlatforms = ["JVM"] // See platforms section of documentation

    jdkVersion = 8

    // No default documentation link to kotlin-stdlib
    noStdlibLink = false


    linkMapping {
        dir = "src/main/kotlin"
        url = "https://github.com/Verifaps/verifaps-lib/tree/master/"
        suffix = "#L"
    }
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'com.palantir.git-version'

    group = 'edu.kit.iti.formal'

    ext.gitVersion = versionDetails()
    if (ext.gitVersion.lastTag) {
        version = ext.gitVersion.lastTag.replace("v", "")
        if (!ext.gitVersion.isClean) {
            version = "${version}-SNAPSHOT"
        }
    }

    //println(ext.gitVersion)
    //println(version)

    idea {
        module {
            downloadJavadoc = false
            downloadSources = true
        }
    }

}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: "com.jfrog.bintray"
    apply plugin: "org.jetbrains.kotlin.jvm"
    //apply plugin: 'io.franzbecker.gradle-lombok'
    apply plugin: "com.github.hierynomus.license"
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'kotlin'
    apply plugin: 'maven'


    ext.kotlin_version = '1.2.50'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileKotlin {
        kotlinOptions {
            suppressWarnings = true
            jvmTarget = "1.8"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://jcenter.bintray.com" }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        compile group: 'org.jetbrains', name: 'annotations', version: '15.0'
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
        compile group: 'commons-io', name: 'commons-io', version: '2.6'
        compile group: 'com.google.guava', name: 'guava', version: '23.6-jre'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
        compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        //compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.20'
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }



    publishing {
        repositories {
            maven {
                url System.getenv('HOME') + "/tmp/verifaps-repo"
            }
        }
    }

    javadoc {
        failOnError = false
        verbose = false
    }


    license {
        mapping("java", "PHP")
        mapping("kt", "PHP")

        header = file("gradle/HEADER")
        ext.name = "geteta"
        ext.holder = "Alexander Weigl <weigl@kit.edu>"
        ext.year = "2016-2018"
        exclude "*.xml"
        exclude "*.g4"
        exclude "*.smv"
    }

    //Checks does not work
    licenseMain.enabled = false
    licenseTest.enabled = false

    sourceSets { test { resources { srcDirs "../share/test-resources" } } }
}
