MODULE main
IVAR
    I : signed word[16];
    learn : boolean;
    mode : {LEARN, ACTIVE};
-- end of IVAR
VAR
    _table : table(code$.mode, code$.learn, code$.I, next(code$.Q), next(code$.W));
    code$ : MinMax(I, learn, mode);
-- end of VAR
DEFINE

-- end of module main
MODULE MinMax(I, learn, mode)
VAR
    Q : signed word[16];
    W : boolean;
    WAIT_AFTER_WARNING : signed word[16];
    WAIT_BEFORE_WARNING : signed word[16];
    cntHeat : signed word[16];
    cntQuench : signed word[16];
    lower : signed word[16];
    upper : signed word[16];
-- end of VAR
DEFINE
    mode$116 := mode$9;
    mode$130 := mode$9;
    mode$141 := case
        I$0 != Q$112 : mode$116; 
        TRUE : mode$130; 
    esac;
    mode$152 := case
        upper$10 < lower$8 : mode$9; 
        TRUE : mode$141; 
    esac;
    mode$163 := case
        mode$9 = LEARN : mode$55; 
        TRUE : mode$152; 
    esac;
    mode$55 := mode$9;
    mode$9 := mode;
    Q$1 := Q;
    Q$112 := case
        upper$10 <= (case
            lower$8 >= I$0 : lower$8; 
            TRUE : I$0; 
        esac) : upper$10; 
        TRUE : case
            lower$8 >= I$0 : lower$8; 
            TRUE : I$0; 
        esac; 
    esac;
    Q$117 := Q$112;
    Q$131 := Q$112;
    Q$142 := case
        I$0 != Q$112 : Q$117; 
        TRUE : Q$131; 
    esac;
    Q$153 := case
        upper$10 < lower$8 : Q$68; 
        TRUE : Q$142; 
    esac;
    Q$164 := case
        mode$9 = LEARN : Q$66; 
        TRUE : Q$153; 
    esac;
    Q$56 := Q$1;
    Q$66 := 0sd16_0;
    Q$68 := 0sd16_0;
    learn$118 := learn$7;
    learn$132 := learn$7;
    learn$143 := case
        I$0 != Q$112 : learn$118; 
        TRUE : learn$132; 
    esac;
    learn$154 := case
        upper$10 < lower$8 : learn$7; 
        TRUE : learn$143; 
    esac;
    learn$165 := case
        mode$9 = LEARN : learn$57; 
        TRUE : learn$154; 
    esac;
    learn$57 := learn$7;
    learn$7 := learn;
    W$115 := TRUE;
    W$121 := case
        cntHeat$113 = 0sd16_0 : W$115; 
        TRUE : W$2; 
    esac;
    W$129 := FALSE;
    W$135 := case
        cntQuench$127 = 0sd16_0 : W$129; 
        TRUE : W$2; 
    esac;
    W$146 := case
        I$0 != Q$112 : W$121; 
        TRUE : W$135; 
    esac;
    W$157 := case
        upper$10 < lower$8 : W$69; 
        TRUE : W$146; 
    esac;
    W$168 := case
        mode$9 = LEARN : W$67; 
        TRUE : W$157; 
    esac;
    W$2 := W;
    W$60 := W$2;
    W$67 := FALSE;
    W$69 := TRUE;
    lower$120 := lower$8;
    lower$134 := lower$8;
    lower$145 := case
        I$0 != Q$112 : lower$120; 
        TRUE : lower$134; 
    esac;
    lower$156 := case
        upper$10 < lower$8 : lower$8; 
        TRUE : lower$145; 
    esac;
    lower$167 := case
        mode$9 = LEARN : lower$59; 
        TRUE : lower$156; 
    esac;
    lower$32 := case
        lower$8 <= I$0 : lower$8; 
        TRUE : I$0; 
    esac;
    lower$59 := case
        learn$7 : lower$32; 
        TRUE : lower$8; 
    esac;
    lower$8 := lower;
    upper$10 := upper;
    upper$119 := upper$10;
    upper$133 := upper$10;
    upper$144 := case
        I$0 != Q$112 : upper$119; 
        TRUE : upper$133; 
    esac;
    upper$155 := case
        upper$10 < lower$8 : upper$10; 
        TRUE : upper$144; 
    esac;
    upper$166 := case
        mode$9 = LEARN : upper$58; 
        TRUE : upper$155; 
    esac;
    upper$54 := case
        upper$10 >= I$0 : upper$10; 
        TRUE : I$0; 
    esac;
    upper$58 := case
        learn$7 : upper$54; 
        TRUE : upper$10; 
    esac;
    cntQuench$114 := WAIT_AFTER_WARNING$3;
    cntQuench$122 := cntQuench$114;
    cntQuench$127 := cntQuench$6 - 0sd16_1;
    cntQuench$136 := cntQuench$127;
    cntQuench$147 := case
        I$0 != Q$112 : cntQuench$122; 
        TRUE : cntQuench$136; 
    esac;
    cntQuench$158 := case
        upper$10 < lower$8 : cntQuench$6; 
        TRUE : cntQuench$147; 
    esac;
    cntQuench$169 := case
        mode$9 = LEARN : cntQuench$61; 
        TRUE : cntQuench$158; 
    esac;
    cntQuench$6 := cntQuench;
    cntQuench$61 := cntQuench$6;
    I$0 := I;
    I$123 := I$0;
    I$137 := I$0;
    I$148 := case
        I$0 != Q$112 : I$123; 
        TRUE : I$137; 
    esac;
    I$159 := case
        upper$10 < lower$8 : I$0; 
        TRUE : I$148; 
    esac;
    I$170 := case
        mode$9 = LEARN : I$62; 
        TRUE : I$159; 
    esac;
    I$62 := I$0;
    WAIT_AFTER_WARNING$125 := WAIT_AFTER_WARNING$3;
    WAIT_AFTER_WARNING$139 := WAIT_AFTER_WARNING$3;
    WAIT_AFTER_WARNING$150 := case
        I$0 != Q$112 : WAIT_AFTER_WARNING$125; 
        TRUE : WAIT_AFTER_WARNING$139; 
    esac;
    WAIT_AFTER_WARNING$161 := case
        upper$10 < lower$8 : WAIT_AFTER_WARNING$3; 
        TRUE : WAIT_AFTER_WARNING$150; 
    esac;
    WAIT_AFTER_WARNING$172 := case
        mode$9 = LEARN : WAIT_AFTER_WARNING$64; 
        TRUE : WAIT_AFTER_WARNING$161; 
    esac;
    WAIT_AFTER_WARNING$3 := WAIT_AFTER_WARNING;
    WAIT_AFTER_WARNING$64 := WAIT_AFTER_WARNING$3;
    cntHeat$113 := cntHeat$5 - 0sd16_1;
    cntHeat$124 := cntHeat$113;
    cntHeat$128 := WAIT_BEFORE_WARNING$4;
    cntHeat$138 := cntHeat$128;
    cntHeat$149 := case
        I$0 != Q$112 : cntHeat$124; 
        TRUE : cntHeat$138; 
    esac;
    cntHeat$160 := case
        upper$10 < lower$8 : cntHeat$5; 
        TRUE : cntHeat$149; 
    esac;
    cntHeat$171 := case
        mode$9 = LEARN : cntHeat$63; 
        TRUE : cntHeat$160; 
    esac;
    cntHeat$5 := cntHeat;
    cntHeat$63 := cntHeat$5;
    WAIT_BEFORE_WARNING$126 := WAIT_BEFORE_WARNING$4;
    WAIT_BEFORE_WARNING$140 := WAIT_BEFORE_WARNING$4;
    WAIT_BEFORE_WARNING$151 := case
        I$0 != Q$112 : WAIT_BEFORE_WARNING$126; 
        TRUE : WAIT_BEFORE_WARNING$140; 
    esac;
    WAIT_BEFORE_WARNING$162 := case
        upper$10 < lower$8 : WAIT_BEFORE_WARNING$4; 
        TRUE : WAIT_BEFORE_WARNING$151; 
    esac;
    WAIT_BEFORE_WARNING$173 := case
        mode$9 = LEARN : WAIT_BEFORE_WARNING$65; 
        TRUE : WAIT_BEFORE_WARNING$162; 
    esac;
    WAIT_BEFORE_WARNING$4 := WAIT_BEFORE_WARNING;
    WAIT_BEFORE_WARNING$65 := WAIT_BEFORE_WARNING$4;
ASSIGN
    init(Q) := 0sd16_0;
    init(W) := FALSE;
    init(WAIT_AFTER_WARNING) := 0sd16_3;
    init(WAIT_BEFORE_WARNING) := 0sd16_3;
    init(cntHeat) := 0sd16_3;
    init(cntQuench) := 0sd16_3;
    init(lower) := 0sd16_32766;
    init(upper) := -0sd16_32767;
    next(Q) := Q$164;
    next(W) := W$168;
    next(WAIT_AFTER_WARNING) := WAIT_AFTER_WARNING$172;
    next(WAIT_BEFORE_WARNING) := WAIT_BEFORE_WARNING$173;
    next(cntHeat) := cntHeat$171;
    next(cntQuench) := cntQuench$169;
    next(lower) := lower$167;
    next(upper) := upper$166;
-- end of module MinMax
MODULE table(code$mode, code$learn, code$I, code$Q, code$W)
FROZENVAR
    "max" : signed word[16];
    "min" : signed word[16];
-- end of FROZENVAR
VAR
    __ERROR__ : boolean;
    __SENTINEL__ : boolean;
    g3_1_r04_01 : boolean;
    g3_1_r05_01 : boolean;
    g3_2_r04_01 : boolean;
    g3_2_r05_01 : boolean;
    r02_01 : boolean;
-- end of VAR
DEFINE
    r02_out_Q := 0sd16_0 = code$Q;
    r02_out_W := TRUE = code$W;
    r02_out := r02_out_Q & r02_out_W;
    r02_in_mode := ACTIVE = code$mode;
    r02_in_I := TRUE;
    r02_in_learn := TRUE;
    r02_in := r02_in_mode & r02_in_I & r02_in_learn;
    r02_progress := r02_fwd & !FALSE;
    r02_fail := r02_in & !r02_out;
    r02_fwd := r02_in & r02_out;
    r04_out_Q := 0sd16_0 = code$Q;
    r04_out_W := TRUE = code$W;
    r04_out := r04_out_Q & r04_out_W;
    r04_in_mode := ACTIVE = code$mode;
    r04_in_I := TRUE;
    r04_in_learn := TRUE;
    r04_in := r04_in_mode & r04_in_I & r04_in_learn;
    r04_progress := r04_fwd & !FALSE;
    r04_fail := r04_in & !r04_out;
    r04_fwd := r04_in & r04_out;
    r05_out_Q := 0sd16_0 = code$Q;
    r05_out_W := TRUE = code$W;
    r05_out := r05_out_Q & r05_out_W;
    r05_in_mode := ACTIVE = code$mode;
    r05_in_I := TRUE;
    r05_in_learn := TRUE;
    r05_in := r05_in_mode & r05_in_I & r05_in_learn;
    r05_progress := r05_fwd & !FALSE;
    r05_fail := r05_in & !r05_out;
    r05_fwd := r05_in & r05_out;
    r04_out_Q := 0sd16_0 = code$Q;
    r04_out_W := TRUE = code$W;
    r04_out := r04_out_Q & r04_out_W;
    r04_in_mode := ACTIVE = code$mode;
    r04_in_I := TRUE;
    r04_in_learn := TRUE;
    r04_in := r04_in_mode & r04_in_I & r04_in_learn;
    r04_progress := r04_fwd & !FALSE;
    r04_fail := r04_in & !r04_out;
    r04_fwd := r04_in & r04_out;
    r05_out_Q := 0sd16_0 = code$Q;
    r05_out_W := TRUE = code$W;
    r05_out := r05_out_Q & r05_out_W;
    r05_in_mode := ACTIVE = code$mode;
    r05_in_I := TRUE;
    r05_in_learn := TRUE;
    r05_in := r05_in_mode & r05_in_I & r05_in_learn;
    r05_progress := r05_fwd & !FALSE;
    r05_fail := r05_in & !r05_out;
    r05_fwd := r05_in & r05_out;
    g3_1_r05_01_accept := g3_1_r05_01 & r05_fwd;
    g3_1_r05_01_fail := g3_1_r05_01 & r05_fail;
    g3_1_r05_01_acceptp := g3_1_r05_01_accept & !r05_progress;
    r02_01_accept := r02_01 & r02_fwd;
    r02_01_fail := r02_01 & r02_fail;
    r02_01_acceptp := r02_01_accept & !r02_progress;
    g3_2_r04_01_accept := g3_2_r04_01 & r04_fwd;
    g3_2_r04_01_fail := g3_2_r04_01 & r04_fail;
    g3_2_r04_01_acceptp := g3_2_r04_01_accept & !r04_progress;
    g3_1_r04_01_accept := g3_1_r04_01 & r04_fwd;
    g3_1_r04_01_fail := g3_1_r04_01 & r04_fail;
    g3_1_r04_01_acceptp := g3_1_r04_01_accept & !r04_progress;
    g3_2_r05_01_accept := g3_2_r05_01 & r05_fwd;
    g3_2_r05_01_fail := g3_2_r05_01 & r05_fail;
    g3_2_r05_01_acceptp := g3_2_r05_01_accept & !r05_progress;

INVARSPEC
    __ERROR__ -> g3_1_r05_01 | r02_01 | g3_2_r04_01 | g3_1_r04_01 | g3_2_r05_01 | __SENTINEL__

INIT
    !g3_1_r05_01 & r02_01 & !g3_2_r04_01 & !g3_1_r04_01 & !g3_2_r05_01 & !__ERROR__ & !__SENTINEL__ & 0sd16_0 = "min" & 0sd16_5 = "max";
ASSIGN
    next(__ERROR__) := r02_01_fail | g3_1_r04_01_fail | g3_1_r05_01_fail | g3_2_r04_01_fail | g3_2_r05_01_fail;
    next(__SENTINEL__) := g3_1_r05_01_accept | g3_2_r05_01_accept | __SENTINEL__;
    next(g3_1_r04_01) := r02_01_accept | g3_1_r04_01_accept;
    next(g3_1_r05_01) := g3_1_r04_01_accept | g3_1_r05_01_accept;
    next(g3_2_r04_01) := g3_1_r05_01_accept | g3_2_r05_01_accept | g3_2_r04_01_accept;
    next(g3_2_r05_01) := g3_2_r04_01_accept | g3_2_r05_01_accept;
    next(r02_01) := r02_01_accept;
-- end of module table
