MODULE main
IVAR
    code$$I : signed word[16];
    code$$learn : boolean;
    code$$mode : {LEARN, ACTIVE};
-- end of IVAR
VAR
    _table : table(code$.mode, code$.learn, code$.I, next(code$.Q), next(code$.W));
    code$ : MinMax(code$$I, code$$learn, code$$mode);
-- end of VAR
DEFINE

-- end of module main
MODULE MinMax(I, learn, mode)
VAR
    Q : signed word[16];
    W : boolean;
    WAIT_AFTER_WARNING : signed word[16];
    WAIT_BEFORE_WARNING : signed word[16];
    cntHeat : signed word[16];
    cntQuench : signed word[16];
    lower : signed word[16];
    upper : signed word[16];
-- end of VAR
DEFINE
    mode$141 := case
        I != Q$00112 : mode; 
        TRUE : mode; 
    esac;
    mode$152 := case
        upper < lower : mode; 
        TRUE : mode$141; 
    esac;
    mode$163 := case
        mode = LEARN : mode; 
        TRUE : mode$152; 
    esac;
    Q$00066 := 0sd16_0;
    Q$00068 := 0sd16_0;
    Q$00112 := case
        upper <= (case
            lower >= I : lower; 
            TRUE : I; 
        esac) : upper; 
        TRUE : case
            lower >= I : lower; 
            TRUE : I; 
        esac; 
    esac;
    Q$142 := case
        I != Q$00112 : Q$00112; 
        TRUE : Q$00112; 
    esac;
    Q$153 := case
        upper < lower : Q$00068; 
        TRUE : Q$142; 
    esac;
    Q$164 := case
        mode = LEARN : Q$00066; 
        TRUE : Q$153; 
    esac;
    learn$143 := case
        I != Q$00112 : learn; 
        TRUE : learn; 
    esac;
    learn$154 := case
        upper < lower : learn; 
        TRUE : learn$143; 
    esac;
    learn$165 := case
        mode = LEARN : learn; 
        TRUE : learn$154; 
    esac;
    W$00067 := FALSE;
    W$00069 := TRUE;
    W$00115 := TRUE;
    W$00129 := FALSE;
    W$121 := case
        cntHeat$00113 = 0sd16_0 : W$00115; 
        TRUE : W; 
    esac;
    W$135 := case
        cntQuench$00127 = 0sd16_0 : W$00129; 
        TRUE : W; 
    esac;
    W$146 := case
        I != Q$00112 : W$121; 
        TRUE : W$135; 
    esac;
    W$157 := case
        upper < lower : W$00069; 
        TRUE : W$146; 
    esac;
    W$168 := case
        mode = LEARN : W$00067; 
        TRUE : W$157; 
    esac;
    lower$00032 := case
        lower <= I : lower; 
        TRUE : I; 
    esac;
    lower$145 := case
        I != Q$00112 : lower; 
        TRUE : lower; 
    esac;
    lower$156 := case
        upper < lower : lower; 
        TRUE : lower$145; 
    esac;
    lower$167 := case
        mode = LEARN : lower$59; 
        TRUE : lower$156; 
    esac;
    lower$59 := case
        learn : lower$00032; 
        TRUE : lower; 
    esac;
    upper$00054 := case
        upper >= I : upper; 
        TRUE : I; 
    esac;
    upper$144 := case
        I != Q$00112 : upper; 
        TRUE : upper; 
    esac;
    upper$155 := case
        upper < lower : upper; 
        TRUE : upper$144; 
    esac;
    upper$166 := case
        mode = LEARN : upper$58; 
        TRUE : upper$155; 
    esac;
    upper$58 := case
        learn : upper$00054; 
        TRUE : upper; 
    esac;
    cntQuench$00127 := cntQuench - 0sd16_1;
    cntQuench$147 := case
        I != Q$00112 : WAIT_AFTER_WARNING; 
        TRUE : cntQuench$00127; 
    esac;
    cntQuench$158 := case
        upper < lower : cntQuench; 
        TRUE : cntQuench$147; 
    esac;
    cntQuench$169 := case
        mode = LEARN : cntQuench; 
        TRUE : cntQuench$158; 
    esac;
    I$148 := case
        I != Q$00112 : I; 
        TRUE : I; 
    esac;
    I$159 := case
        upper < lower : I; 
        TRUE : I$148; 
    esac;
    I$170 := case
        mode = LEARN : I; 
        TRUE : I$159; 
    esac;
    WAIT_AFTER_WARNING$150 := case
        I != Q$00112 : WAIT_AFTER_WARNING; 
        TRUE : WAIT_AFTER_WARNING; 
    esac;
    WAIT_AFTER_WARNING$161 := case
        upper < lower : WAIT_AFTER_WARNING; 
        TRUE : WAIT_AFTER_WARNING$150; 
    esac;
    WAIT_AFTER_WARNING$172 := case
        mode = LEARN : WAIT_AFTER_WARNING; 
        TRUE : WAIT_AFTER_WARNING$161; 
    esac;
    cntHeat$00113 := cntHeat - 0sd16_1;
    cntHeat$149 := case
        I != Q$00112 : cntHeat$00113; 
        TRUE : WAIT_BEFORE_WARNING; 
    esac;
    cntHeat$160 := case
        upper < lower : cntHeat; 
        TRUE : cntHeat$149; 
    esac;
    cntHeat$171 := case
        mode = LEARN : cntHeat; 
        TRUE : cntHeat$160; 
    esac;
    WAIT_BEFORE_WARNING$151 := case
        I != Q$00112 : WAIT_BEFORE_WARNING; 
        TRUE : WAIT_BEFORE_WARNING; 
    esac;
    WAIT_BEFORE_WARNING$162 := case
        upper < lower : WAIT_BEFORE_WARNING; 
        TRUE : WAIT_BEFORE_WARNING$151; 
    esac;
    WAIT_BEFORE_WARNING$173 := case
        mode = LEARN : WAIT_BEFORE_WARNING; 
        TRUE : WAIT_BEFORE_WARNING$162; 
    esac;
ASSIGN
    init(Q) := 0sd16_0;
    init(W) := FALSE;
    init(WAIT_AFTER_WARNING) := 0sd16_3;
    init(WAIT_BEFORE_WARNING) := 0sd16_3;
    init(cntHeat) := 0sd16_3;
    init(cntQuench) := 0sd16_3;
    init(lower) := 0sd16_32766;
    init(upper) := -0sd16_32767;
    next(Q) := Q$164;
    next(W) := W$168;
    next(WAIT_AFTER_WARNING) := WAIT_AFTER_WARNING$172;
    next(WAIT_BEFORE_WARNING) := WAIT_BEFORE_WARNING$173;
    next(cntHeat) := cntHeat$171;
    next(cntQuench) := cntQuench$169;
    next(lower) := lower$167;
    next(upper) := upper$166;
-- end of module MinMax
MODULE table(code$mode, code$learn, code$I, code$Q, code$W)
FROZENVAR
    "max" : signed word[16];
    "min" : signed word[16];
-- end of FROZENVAR
VAR
    __ERROR__ : boolean;
    __SENTINEL__ : boolean;
    g3_1_r04_01 : boolean;
    g3_1_r05_01 : boolean;
    g3_2_r04_01 : boolean;
    g3_2_r05_01 : boolean;
    r02_01 : boolean;
-- end of VAR
DEFINE
    r02_out_code$Q := 0sd16_0 = code$Q;
    r02_out_code$W := TRUE = code$W;
    r02_out := r02_out_code$Q & r02_out_code$W;
    r02_in_code$I := TRUE;
    r02_in_code$learn := TRUE;
    r02_in_code$mode := ACTIVE = code$mode;
    r02_in := r02_in_code$I & r02_in_code$learn & r02_in_code$mode;
    r02_progress := r02_fwd & !FALSE;
    r02_fail := r02_in & !r02_out;
    r02_fwd := r02_in & r02_out;
    r04_out_code$Q := 0sd16_0 = code$Q;
    r04_out_code$W := TRUE = code$W;
    r04_out := r04_out_code$Q & r04_out_code$W;
    r04_in_code$I := TRUE;
    r04_in_code$learn := TRUE;
    r04_in_code$mode := ACTIVE = code$mode;
    r04_in := r04_in_code$I & r04_in_code$learn & r04_in_code$mode;
    r04_progress := r04_fwd & !FALSE;
    r04_fail := r04_in & !r04_out;
    r04_fwd := r04_in & r04_out;
    r05_out_code$Q := 0sd16_0 = code$Q;
    r05_out_code$W := TRUE = code$W;
    r05_out := r05_out_code$Q & r05_out_code$W;
    r05_in_code$I := TRUE;
    r05_in_code$learn := TRUE;
    r05_in_code$mode := ACTIVE = code$mode;
    r05_in := r05_in_code$I & r05_in_code$learn & r05_in_code$mode;
    r05_progress := r05_fwd & !FALSE;
    r05_fail := r05_in & !r05_out;
    r05_fwd := r05_in & r05_out;
    r04_out_code$Q := 0sd16_0 = code$Q;
    r04_out_code$W := TRUE = code$W;
    r04_out := r04_out_code$Q & r04_out_code$W;
    r04_in_code$I := TRUE;
    r04_in_code$learn := TRUE;
    r04_in_code$mode := ACTIVE = code$mode;
    r04_in := r04_in_code$I & r04_in_code$learn & r04_in_code$mode;
    r04_progress := r04_fwd & !FALSE;
    r04_fail := r04_in & !r04_out;
    r04_fwd := r04_in & r04_out;
    r05_out_code$Q := 0sd16_0 = code$Q;
    r05_out_code$W := TRUE = code$W;
    r05_out := r05_out_code$Q & r05_out_code$W;
    r05_in_code$I := TRUE;
    r05_in_code$learn := TRUE;
    r05_in_code$mode := ACTIVE = code$mode;
    r05_in := r05_in_code$I & r05_in_code$learn & r05_in_code$mode;
    r05_progress := r05_fwd & !FALSE;
    r05_fail := r05_in & !r05_out;
    r05_fwd := r05_in & r05_out;
    g3_1_r05_01_accept := g3_1_r05_01 & r05_fwd;
    g3_1_r05_01_fail := g3_1_r05_01 & r05_fail;
    g3_1_r05_01_acceptp := g3_1_r05_01_accept & !r05_progress;
    r02_01_accept := r02_01 & r02_fwd;
    r02_01_fail := r02_01 & r02_fail;
    r02_01_acceptp := r02_01_accept & !r02_progress;
    g3_2_r04_01_accept := g3_2_r04_01 & r04_fwd;
    g3_2_r04_01_fail := g3_2_r04_01 & r04_fail;
    g3_2_r04_01_acceptp := g3_2_r04_01_accept & !r04_progress;
    g3_1_r04_01_accept := g3_1_r04_01 & r04_fwd;
    g3_1_r04_01_fail := g3_1_r04_01 & r04_fail;
    g3_1_r04_01_acceptp := g3_1_r04_01_accept & !r04_progress;
    g3_2_r05_01_accept := g3_2_r05_01 & r05_fwd;
    g3_2_r05_01_fail := g3_2_r05_01 & r05_fail;
    g3_2_r05_01_acceptp := g3_2_r05_01_accept & !r05_progress;

INVARSPEC
    __ERROR__ -> g3_1_r05_01 | r02_01 | g3_2_r04_01 | g3_1_r04_01 | g3_2_r05_01 | __SENTINEL__

INIT
    !g3_1_r05_01 & r02_01 & !g3_2_r04_01 & !g3_1_r04_01 & !g3_2_r05_01 & !__ERROR__ & !__SENTINEL__ & 0sd16_0 = "min" & 0sd16_5 = "max";
ASSIGN
    next(__ERROR__) := r02_01_fail | g3_1_r04_01_fail | g3_1_r05_01_fail | g3_2_r04_01_fail | g3_2_r05_01_fail;
    next(__SENTINEL__) := g3_1_r05_01_accept | g3_2_r05_01_accept | __SENTINEL__;
    next(g3_1_r04_01) := r02_01_accept | g3_1_r04_01_accept;
    next(g3_1_r05_01) := g3_1_r04_01_accept | g3_1_r05_01_accept;
    next(g3_2_r04_01) := g3_1_r05_01_accept | g3_2_r05_01_accept | g3_2_r04_01_accept;
    next(g3_2_r05_01) := g3_2_r04_01_accept | g3_2_r05_01_accept;
    next(r02_01) := r02_01_accept;
-- end of module table
