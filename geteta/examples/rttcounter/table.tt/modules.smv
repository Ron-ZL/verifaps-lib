MODULE main
IVAR
	__PAUSE__ : boolean;
	__PAUSE__ : boolean;
-- end of IVAR
VAR
	onecnt$0 : ANONYM(__PAUSE__);
	twocnt$1 : ANONYM(__PAUSE__);
	tableModule : T(onecnt$0.c, twocnt$1.c, onecnt$0.__PAUSE__, twocnt$1.__PAUSE__);
-- end of VAR
DEFINE

-- end of module main
MODULE T(onecnt$0$c, twocnt$1$c, onecnt$0$__PAUSE__, twocnt$1$__PAUSE__)
VAR
	s_1_1 : boolean;
	s_1_1 : boolean;
	s__$ERROR__$ERROR : boolean;
	s__$SENTINEL__$SENTINEL : boolean;
-- end of VAR
DEFINE
	s1_out := TRUE & TRUE;
	s1_in := TRUE & TRUE;
	s1_fail := s1_in & !s1_out;
	s1_fwd := s1_in & s1_out;
	s_1_1_fwd := s_1_1 & s1_fwd;
	s_1_1_fail := s_1_1 & s1_fail;
	s1_out := onecnt$0$c = c & TRUE;
	s1_in := TRUE & TRUE;
	s1_fail := s1_in & !s1_out;
	s1_fwd := s1_in & s1_out;
	s_1_1_fwd := s_1_1 & s1_fwd;
	s_1_1_fail := s_1_1 & s1_fail;
LTLSPEC
	TRUE -> (F( !s_1_1 & !s_1_1 & !s__$ERROR__$ERROR | s_1_1_fwd));

INVARSPEC
	s__$ERROR__$ERROR -> s_1_1 | s_1_1 | s__$SENTINEL__$SENTINEL;

INIT
	s_1_1 & !s_1_1 & !s__$ERROR__$ERROR & !s__$SENTINEL__$SENTINELkotlin.Unit;
ASSIGN
	next(s_1_1) := s_1_1_fwd;
	next(s_1_1) := s_1_1_fwd;
	next(s__$ERROR__$ERROR) := s_1_1_fail | s_1_1_fail;
	next(s__$SENTINEL__$SENTINEL) := s_1_1_fwd | s__$SENTINEL__$SENTINEL;

-- end of module T
MODULE ANONYM(__PAUSE__)
VAR
	c : signed word[16];
	s : signed word[16];
-- end of VAR
DEFINE
ASSIGN
	init(c) := 0sd16_0;
	init(s) := 0sd16_0;
	next(c) := case 
__PAUSE__ : c; TRUE : s + 0sd16_1; 
esac;
	next(s) := case 
__PAUSE__ : s; TRUE : s + 0sd16_1; 
esac;

-- end of module ANONYM
MODULE ANONYM(__PAUSE__)
VAR
	c : signed word[16];
-- end of VAR
DEFINE
ASSIGN
	init(c) := 0sd16_0;
	next(c) := case 
__PAUSE__ : c; TRUE : c + 0sd16_2; 
esac;

-- end of module ANONYM
