MODULE main
IVAR
	i : signed word[16];
-- end of IVAR
VAR
	code : dw(i);
	table : TTable(i, next(code.v));
-- end of VAR

-- end of module main

MODULE TTable(i, o)
VAR
	s_2_2 : boolean;
	s_3_3 : boolean;
	s__$ERROR : boolean;
	s__$SENTINEL : boolean;
-- end of VAR
DEFINE
	s2_fail := s2_in & !s2_out;
	s2_fwd := s2_in & s2_out;
	s2_in := TRUE;
	s2_keep := !s3_in & s2_in & s2_out;
	s2_out := TRUE;
	s3_fail := s3_in & !s3_out;
	s3_fwd := s3_in & s3_out;
	s3_in := TRUE;
	s3_out := TRUE;
	s_2_2_fail := s_2_2 & s2_fail;
	s_2_2_fwd := s_2_2 & s2_fwd;
	s_3_3_fail := s_3_3 & s3_fail;
	s_3_3_fwd := s_3_3 & s3_fwd;
LTLSPEC
	(G(F(s3_in))) -> (F(!s_2_2 & !s_3_3 & !s__$ERROR | s_3_3_fwd));

INVARSPEC
	s__$ERROR -> s_2_2 | s_3_3 | s__$SENTINEL;

INIT
	s_2_2 & !s_3_3 & !s__$ERROR & !s__$SENTINEL;
ASSIGN
	next(s_2_2) := FALSE | s_2_2 & s2_keep;
	next(s_3_3) := s_2_2_fwd & !(s_3_3 & s3_in);
	next(s__$ERROR) := s_2_2_fail | s_3_3_fail;
	next(s__$SENTINEL) := s_3_3_fwd | s__$SENTINEL;

-- end of module TTable

MODULE dw(i)
VAR
	s : signed word[16];
	o : signed word[16];
-- end of VAR
ASSIGN
	init(s) := 0sd16_0;
	init(o) := 0sd16_0;
	next(s) := s + 0sd16_1;
	next(o) := case 
i = 0sd16_1 : 0sd16_1; TRUE : s + 0sd16_1; 
esac;

-- end of module dw

