import org.unbrokendome.gradle.plugins.xjc.XjcGenerate

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.30"
    id 'org.unbroken-dome.xjc' version '1.1.3'
    id 'io.franzbecker.gradle-lombok' version '1.11'
    id "com.github.hierynomus.license" version "0.14.0"

    //coverage
    id 'net.saliman.cobertura' version '2.3.1'
    id 'com.github.kt3k.coveralls' version '2.8.2'
//    id "io.github.ddimtirov.codacy" version "0.1.0"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'antlr'
apply plugin: 'idea'
//apply plugin: 'application'

ext.kotlin_version = '1.2.30'
group = 'edu.kit.iti.formal'
version = '0.6.0-SNAPSHOT'
//mainClassName = "edu.kit.iti.formal.automation.testtables.ExTeTa"

description = """
    Generalized Test Table
"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

def antlrOutputDir = file("build/generated-src/antlr")
def xjcOutputDir = file("build/generated-src/xjc")


repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://formal.iti.kit.edu/maven2" }
    maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'edu.kit.iti.formal', name: 'iec61131lang', version: '1.5.0-SNAPSHOT'
    compile group: 'edu.kit.iti.formal', name: 'iec-symbex', version: '1.5.0-SNAPSHOT'
    compile group: 'edu.kit.iti.formal', name: 'smv-model', version: '1.5.0-SNAPSHOT'
    testCompile 'junit:junit:4.12'
    antlr group: 'org.antlr', name: 'antlr4', version: 4.7
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'com.github.jferard:fastods:0.4.1'
}

sourceSets {
    main {
        java {
            srcDirs antlrOutputDir, xjcOutputDir
        }
    }
}

idea {
    module {
        // if you hate browsing Javadoc
        downloadJavadoc = false

        // and love reading sources :)
        downloadSources = true
    }
}


generateGrammarSource {
    outputDirectory antlrOutputDir
    arguments << '-package' << 'edu.kit.iti.formal.automation.testtables.grammar'
    arguments << '-visitor'
}

xjcGenerate.enabled = false

task xjcGenerateExteta(type: XjcGenerate) {
    docLanguage = "en"
    source = file('src/main/xsd/exteta-1.1.xsd')
    outputDirectory = xjcOutputDir
    targetPackage = "edu.kit.iti.formal.automation.testtables.schema"
}

task xjcGenerateReport(type: XjcGenerate) {
    source = fileTree('src/main/xsd/') { include 'report.xsd' }
    outputDirectory = xjcOutputDir
    docLanguage = "en"
    targetPackage = "edu.kit.iti.formal.automation.testtables.report"
}

compileJava.dependsOn xjcGenerateExteta
compileJava.dependsOn xjcGenerateReport

license {
    mapping("java", "PHP")
    mapping("kt", "PHP")

    header = file("gradle/HEADER")
    ext.name = "geteta"
    ext.holder = "Alexander Weigl <weigl@kit.edu>"
    ext.year = "2016-2018"
    exclude "*.xml"
    exclude "*.g4"
    exclude "*.smv"
}

//Checks does not work
licenseMain.enabled=false
licenseTest.enabled=false

task jarDist(type: Jar) {
    classifier = "exe"
    entryCompression = ZipEntryCompression.DEFLATED
    with jar
    manifest {
        attributes "Main-Class": "edu.kit.iti.formal.automation.testtables.ExTeTa"
    }

    from {
        sourceSets.main.output
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
jarDist.dependsOn jar

task run(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'edu.kit.iti.formal.automation.testtables.ExTeTa'
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// coverage
cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
tasks.coveralls {
    //dependsOn 'check'
}


