import org.unbrokendome.gradle.plugins.xjc.XjcGenerate

plugins {
    id 'org.unbroken-dome.xjc' version '1.1.3'
}

apply plugin: 'antlr'
group = 'edu.kit.iti.formal'

description = """
    Generalized Test Table
"""

def antlrOutputDir = file("build/generated-src/antlr")
def xjcOutputDir = file("build/generated-src/xjc")


repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://formal.iti.kit.edu/maven2" }
    maven { url 'https://jitpack.io' }
    maven { url "http://repo.maven.apache.org/maven2" }
//    maven { url "https://dl.bintray.com/ajalt/maven" }
}

dependencies {
    compile project(':iec-symbex')
    antlr group: 'org.antlr', name: 'antlr4', version: 4.7
    compile 'com.github.jferard:fastods:0.4.1'
    implementation 'com.github.ajalt:clikt:1.3.0'
    compile 'io.github.config4k:config4k:0.4.0'
}

sourceSets {
    main {
        java {
            srcDirs "src/main/java", xjcOutputDir, antlrOutputDir
        }
    }
}

idea {
    module {
        // if you hate browsing Javadoc
        downloadJavadoc = false

        // and love reading sources :)
        downloadSources = true
    }
}


generateGrammarSource {
    outputDirectory antlrOutputDir
    arguments << '-package' << 'edu.kit.iti.formal.automation.testtables.grammar'
    arguments << '-visitor'
}

xjcGenerate.enabled = false

task xjcGenerateExteta(type: XjcGenerate) {
    docLanguage = "en"
    source = file('src/main/xsd/exteta-1.1.xsd')
    outputDirectory = xjcOutputDir
    targetPackage = "edu.kit.iti.formal.automation.testtables.schema"
}

task xjcGenerateReport(type: XjcGenerate) {
    source = fileTree('src/main/xsd/') { include 'report.xsd' }
    outputDirectory = xjcOutputDir
    docLanguage = "en"
    targetPackage = "edu.kit.iti.formal.automation.testtables.report"
}

compileJava.dependsOn xjcGenerateExteta
compileJava.dependsOn xjcGenerateReport
compileJava.dependsOn generateGrammarSource
compileKotlin.dependsOn xjcGenerateReport
compileKotlin.dependsOn xjcGenerateExteta
compileKotlin.dependsOn generateGrammarSource

/*
license {
    mapping("java", "PHP")
    mapping("kt", "PHP")

    header = file("gradle/HEADER")
    ext.name = "geteta"
    ext.holder = "Alexander Weigl <weigl@kit.edu>"
    ext.year = "2016-2018"
    exclude "*.xml"
    exclude "*.g4"
    exclude "*.smv"
}

//Checks does not work
licenseMain.enabled = false
licenseTest.enabled = false
*/

/*
task jarDist(type: Jar) {
    classifier = "exe"
    entryCompression = ZipEntryCompression.DEFLATED
    with jar
    manifest {
        attributes "Main-Class": "edu.kit.iti.formal.automation.testtables.Geteta"
    }

    from {
        sourceSets.main.output
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
jarDist.dependsOn jar
*/

task run(type: JavaExec) {
    group = "run"
    classpath = sourceSets.main.runtimeClasspath
    main = 'edu.kit.iti.formal.automation.testtables.Geteta'
    if (project.hasProperty("appArgs")) {
        args Eval.me(project.property("appArgs"))
    }
}

task runConstantprogram(type: JavaExec) {
    group = "run"
    classpath = sourceSets.main.runtimeClasspath
    main = 'edu.kit.iti.formal.automation.testtables.Geteta'
    workingDir "examples/constantprogram"
    args << "--code" << "constantprogram.st " << "--table " << "constantprogram.tt.txt"
}

test {
    exclude '**/AutomataDrawerTest.class'
}