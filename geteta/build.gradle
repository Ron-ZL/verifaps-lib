
plugins {}

apply plugin: 'antlr'

description = """
    Generalized Test Table
"""

version = "0.9-beta"

def antlrOutputDir = file("build/generated-src/antlr")

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://formal.iti.kit.edu/maven2" }
    maven { url 'https://jitpack.io' }
    maven { url "http://repo.maven.apache.org/maven2" }
//    maven { url "https://dl.bintray.com/ajalt/maven" }
}

dependencies {
    compile project(':symbex')
    antlr group: 'org.antlr', name: 'antlr4', version: '4.7.2'
    compile 'com.github.jferard:fastods:0.6.0'
    implementation 'com.github.ajalt:clikt:1.3.0'
    compile 'io.github.config4k:config4k:0.4.0'

    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.4.0-b180830.0359'
    compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.4.0-b180830.0438'
    compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0.1'
}

sourceSets {
    main {
        java {
            srcDirs "src/main/java", antlrOutputDir
        }
    }
}

idea {
    module {
        // if you hate browsing Javadoc
        downloadJavadoc = false

        // and love reading sources :)
        downloadSources = true
    }
}


generateGrammarSource {
    outputDirectory antlrOutputDir
    arguments << '-package' << 'edu.kit.iti.formal.automation.testtables.grammar'
    arguments << '-visitor'
}

compileJava.dependsOn generateGrammarSource
compileKotlin.dependsOn generateGrammarSource

/*
license {
    mapping("java", "PHP")
    mapping("kt", "PHP")

    header = file("gradle/HEADER")
    ext.name = "geteta"
    ext.holder = "Alexander Weigl <weigl@kit.edu>"
    ext.year = "2016-2018"
    exclude "*.xml"
    exclude "*.g4"
    exclude "*.smv"
}

//Checks does not work
licenseMain.enabled = false
licenseTest.enabled = false
*/

/*
task jarDist(type: Jar) {
    classifier = "exe"
    entryCompression = ZipEntryCompression.DEFLATED
    with jar
    manifest {
        attributes "Main-Class": "edu.kit.iti.formal.automation.testtables.Geteta"
    }

    from {
        sourceSets.main.output
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
jarDist.dependsOn jar
*/

task run(type: JavaExec) {
    group = "run"
    classpath = sourceSets.main.runtimeClasspath
    main = 'edu.kit.iti.formal.automation.testtables.apps.Geteta'
    if (project.hasProperty("appArgs")) {
        args Eval.me(project.property("appArgs"))
    }
}

test {
    exclude '**/AutomataDrawerTest.class'
    exclude '**/SmtEncoderTest.class'
    exclude '**/FullStackTest.class'
    exclude "**/SMVModuleBuilderTest.class"
}


