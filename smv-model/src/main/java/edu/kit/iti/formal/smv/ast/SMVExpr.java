// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package edu.kit.iti.formal.smv.ast;

/*-
 * #%L
 * smv-model
 * %%
 * Copyright (C) 2016 Alexander Weigl
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import org.jetbrains.annotations.NotNull;

/**
 *
 */
public abstract class SMVExpr extends SMVAst {

    /**
     *
     */
    public abstract SMVType getSMVType();

    //region builder methods
    public SQuantified eventually() {
        return new SQuantified(STemporalOperator.F, this);
    }

    public SQuantified globally() {
        return new SQuantified(STemporalOperator.G, this);
    }

    public SQuantified next() {
        return new SQuantified(STemporalOperator.X, this);
    }

    public SQuantified since() {
        return new SQuantified(STemporalOperator.S, this);
    }

    @NotNull
    public SQuantified once() {
        return new SQuantified(STemporalOperator.O, this);
    }

    @NotNull
    public SQuantified until(SMVExpr other) {
        return new SQuantified(STemporalOperator.U, this, other);
    }

    @NotNull
    public SBinaryExpression equal(SMVExpr e) {
        return op(SBinaryOperator.EQUAL, e);
    }

    @NotNull
    public SBinaryExpression and(SMVExpr e) {
        return op(SBinaryOperator.AND, e);
    }

    @NotNull
    public SBinaryExpression or(SMVExpr e) {
        return op(SBinaryOperator.OR, e);
    }

    @NotNull
    public SBinaryExpression op(SBinaryOperator o, SMVExpr e) {
        SBinaryExpression product = new SBinaryExpression(this, o, e);
        product.operator = o;
        product.right = e;
        return product;
    }

    @NotNull
    public SUnaryExpression not() {
        return new SUnaryExpression(SUnaryOperator.NEGATE, this);
    }

    @NotNull
    public SUnaryExpression minus() {
        return new SUnaryExpression(SUnaryOperator.MINUS, this);
    }

    @NotNull
    public SMVExpr implies(SMVExpr e) {
        return op(SBinaryOperator.IMPL, e);
    }


    @NotNull
    public SMVExpr inModule(@NotNull SVariable module) {
        return inModule(module.getName());
    }

    @NotNull
    public abstract SMVExpr inModule(@NotNull String module);
    //endregion
}
