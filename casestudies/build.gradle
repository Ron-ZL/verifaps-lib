apply plugin: 'application'
mainClassName = ""

description = 'Case Studies and Executables of VerifAPS'
dependencies {
    compile project(':iec-symbex')
    compile project(':geteta')
    compile project(':iec-modularization')
    compile project(':aps-rvt')
    compile project(':flycheck')
    compile project(':iec-run')
}

def mainClasses = [
        "modularization": "edu.kit.iti.formal.automation.modularization.ModApp"
        , 'kastel-demo' : "edu.kit.iti.formal.automation.KastelDemonstrator"
        , 'sc12f'       : "edu.kit.iti.formal.automation.Sc12f"
        , 'sc11-rev'    : "edu.kit.iti.formal.automation.SC11_rev"
        , "geteta"      : "edu.kit.iti.formal.automation.testtables.apps.Geteta"
        , 'ttprint'     : 'edu.kit.iti.formal.automation.testtables.apps.Printer'
        , 'reteta'      : 'edu.kit.iti.formal.automation.testtables.apps.Reteta'
        , 'ttmonitor'   : 'edu.kit.iti.formal.automation.testtables.apps.Monitor'
//        , 'ttsynth'     : 'edu.kit.iti.formal.automation.testtables.apps.Synthizer'
        , 'rvt'         : "edu.kit.iti.formal.automation.rvt.RvtappKt"
        , 'flycheck'    : "edu.kit.iti.formal.automation.FlycheckKt"
]


mainClasses.each { a, b ->
    def t = task("createStart$a", type: CreateStartScripts) {
        group = "start-script"
        applicationName = a
        //description "Latex Printer for Test Tables"
        classpath = startScripts.classpath
        outputDir = startScripts.outputDir
        mainClassName = b
        /*startScripts.classpath.files.each {
            c -> println(c)
        }*/
    }
    applicationDistribution.from(t) { into("bin") }
    //createStartScript.dependsOn t
}

applicationDistribution.into("bin") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
/*    from(createScriptKastelDemonstrator)
    from(createScriptSc12f)
    from(createScriptSc11_rev)*/
    fileMode = 0755
}

