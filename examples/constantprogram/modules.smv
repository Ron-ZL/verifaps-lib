MODULE main
IVAR
	i : signed word[16];
-- end of IVAR
VAR
	code : constantprogram(i);
	table : Ta(i, code.o, code.c);
-- end of VAR
ASSIGN

-- end of module main

MODULE Ta(i, o, c)
VAR
	s1 : boolean;
	ERROR : boolean;
-- end of VAR
DEFINE
	s1_fwd := s1_in & s1_out & TRUE;
	s1_in := TRUE;
	s1_keep := s1_in & s1_out & TRUE;
	s1_out := i = o & 0sd16_42 = c;
INVARSPEC
	ERROR -> s1;

INIT
	s1 & !ERROR;
ASSIGN
	next(s1) := FALSE | s1_keep;
	next(ERROR) := s1 & s1_in & !s1_out;

-- end of module Ta

MODULE constantprogram(i)
VAR
	c : signed word[16];
	o : signed word[16];
-- end of VAR
ASSIGN
	init(c) := 0sd16_0;
	init(o) := 0sd16_0;
	next(c) := 0sd16_42;
	next(o) := i;

-- end of module constantprogram

