TYPE
  _INSTANCE_ID_TYPE : INT(-1..2) := -1;
END_TYPE

CLASS ABSTRACT Abs
  VAR
    _INSTANCE_ID : _INSTANCE_ID_TYPE := -1;
  END_VAR
END_CLASS

CLASS A EXTENDS Abs
  VAR
    _INSTANCE_ID : _INSTANCE_ID_TYPE := -1;
    x : INT;
    y : INT;
  END_VAR

  METHOD f : INT
    f := x + y;
  END_METHOD

  METHOD g : INT
    g := x * y;
  END_METHOD
END_CLASS

CLASS B EXTENDS A
  VAR
    _INSTANCE_ID : _INSTANCE_ID_TYPE := -1;
    z : INT;
  END_VAR

  METHOD OVERRIDE f : INT
    f := SUPER.f() + z;
  END_METHOD

  METHOD OVERRIDE g : INT
    g := x * y * z;
  END_METHOD
END_CLASS

CLASS C EXTENDS B
  VAR
    _INSTANCE_ID : _INSTANCE_ID_TYPE := -1;
    r : INT;
  END_VAR

  METHOD OVERRIDE g : INT
    g := r * x * y * z;
  END_METHOD
END_CLASS

VAR_GLOBAL
  _INSTANCES_Abs : ARRAY [0..2] OF Abs := [
    (_INSTANCE_ID := 0),
    (_INSTANCE_ID := 1),
    (_INSTANCE_ID := 2)
  ];
  _INSTANCES_A : ARRAY [0..2] OF A := [
    (_INSTANCE_ID := 0, x := 42, y := 24),
    (_INSTANCE_ID := 1, x := 33, y := 44),
    (_INSTANCE_ID := 2, x := 1, y := 2)
  ];
  _INSTANCES_B : ARRAY [1..2] OF B := [
    (_INSTANCE_ID := 1, z := 55),
    (_INSTANCE_ID := 2, z := 3)
  ];
  _INSTANCES_C : ARRAY [2..2] OF C := [
    (_INSTANCE_ID := 2, r := 4)
  ];
END_VAR

PROGRAM MY_PROGRAM
  VAR
    a : A := (x := 42, y := 24);
    b : B := (x := 33, y := 44, z := 55);
    c : C := (x := 1, y := 2, z := 3, r := 4);
  END_VAR
  VAR_OUTPUT
    x : INT;
    y : INT;
  END_VAR

  y := c.f();
  x := c.x;
END_PROGRAM
