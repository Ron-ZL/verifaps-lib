TopLevelElements(list=[GlobalVariableListDeclaration(), ProgramDeclaration(programBody=StatementList(list=[AssignmentStatement(location=r, expression=a1, reference=false, assignmentAttempt=false), IfStatement(conditionalBranches=[GuardedStatement(condition=switch, statements=StatementList(list=[AssignmentStatement(location=i, expression=a, reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[AssignmentStatement(location=i, expression=b, reference=false, assignmentAttempt=false)])), IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=y, expression=Invocation(callee=A1_f, parameters=[Invocation.Parameter(name=null, output=false, expression=x), Invocation.Parameter(name=_SELF, output=false, expression=GVL._INSTANCES_A1edu.kit.iti.formal.automation.st.ast.ExpressionList@12b0404f[
  expressions=java.util.ArrayList@769e7ee8
])]), reference=false, assignmentAttempt=false)])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=y, expression=Invocation(callee=A_f, parameters=[Invocation.Parameter(name=null, output=false, expression=x), Invocation.Parameter(name=_SELF, output=false, expression=GVL._INSTANCES_Aedu.kit.iti.formal.automation.st.ast.ExpressionList@5276e6b0[
  expressions=java.util.ArrayList@71b1176b
])]), reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[])), IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_Aedu.kit.iti.formal.automation.st.ast.ExpressionList@6193932a[
  expressions=java.util.ArrayList@647fd8ce
].c1, expression=GVL._INSTANCES_Bedu.kit.iti.formal.automation.st.ast.ExpressionList@159f197[
  expressions=java.util.ArrayList@78aab498
].c1, reference=false, assignmentAttempt=false)])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_Aedu.kit.iti.formal.automation.st.ast.ExpressionList@5dd6264[
  expressions=java.util.ArrayList@1ffe63b9
].c1, expression=GVL._INSTANCES_Bedu.kit.iti.formal.automation.st.ast.ExpressionList@51e5fc98[
  expressions=java.util.ArrayList@7c469c48
].c1, reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[])), IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_Aedu.kit.iti.formal.automation.st.ast.ExpressionList@12e61fe6[
  expressions=java.util.ArrayList@7ee955a8
].c2, expression=GVL._INSTANCES_Bedu.kit.iti.formal.automation.st.ast.ExpressionList@1677d1[
  expressions=java.util.ArrayList@48fa0f47
].c2, reference=false, assignmentAttempt=false)])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_Aedu.kit.iti.formal.automation.st.ast.ExpressionList@6ac13091[
  expressions=java.util.ArrayList@5e316c74
].c2, expression=GVL._INSTANCES_Bedu.kit.iti.formal.automation.st.ast.ExpressionList@6d2a209c[
  expressions=java.util.ArrayList@75329a49
].c2, reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[])), IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_Bedu.kit.iti.formal.automation.st.ast.ExpressionList@161479c6[
  expressions=java.util.ArrayList@4313f5bc
].c2, expression=GVL._INSTANCES_Aedu.kit.iti.formal.automation.st.ast.ExpressionList@7f010382[
  expressions=java.util.ArrayList@1e802ef9
].c2, reference=false, assignmentAttempt=false)])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_Bedu.kit.iti.formal.automation.st.ast.ExpressionList@2b6faea6[
  expressions=java.util.ArrayList@778d1062
].c2, expression=GVL._INSTANCES_Aedu.kit.iti.formal.automation.st.ast.ExpressionList@670002[
  expressions=java.util.ArrayList@1f0f1111
].c2, reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[]))]), programName=MY_PROGRAM), TypeDeclarations(declarations=[SubRangeTypeDeclaration(range=Range(start=Literal(dataType=INT(-1), dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=true), stop=Literal(dataType=INT(-1), dataTypeExplicit=false, token=[@-1,0:0='20',<-1>,0:-1], signed=false)))]), FunctionDeclaration(returnType=INT, functionName=A2_f), FunctionDeclaration(returnType=INT, functionName=A_f), FunctionDeclaration(returnType=INT, functionName=A1_f), TypeDeclarations(declarations=[StructureTypeDeclaration(fields=LocalScope{b1:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)},b2:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)},c1:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)},c2:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)},_INSTANCE_ID:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)}}), StructureTypeDeclaration(fields=LocalScope{_INSTANCE_ID:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)}}), StructureTypeDeclaration(fields=LocalScope{_INSTANCE_ID:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)}}), StructureTypeDeclaration(fields=LocalScope{c1:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)},c2:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)},_INSTANCE_ID:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)}}), StructureTypeDeclaration(fields=LocalScope{z:edu.kit.iti.formal.automation.datatypes.AnyBit$Bool@69930714},_INSTANCE_ID:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)}})])])
