TopLevelElements(list=[GlobalVariableListDeclaration(), ProgramDeclaration(programBody=StatementList(list=[AssignmentStatement(location=rinstBase1, expression=instBase, reference=false, assignmentAttempt=false), AssignmentStatement(location=rinstBase2, expression=instDerived, reference=false, assignmentAttempt=false), AssignmentStatement(location=rinstDerived1, expression=rinstBase1, reference=false, assignmentAttempt=true), AssignmentStatement(location=rinstDerived2, expression=rinstBase2, reference=false, assignmentAttempt=true), AssignmentStatement(location=interf1, expression=instBase, reference=false, assignmentAttempt=false), AssignmentStatement(location=interf2, expression=instDerived, reference=false, assignmentAttempt=false), AssignmentStatement(location=rinstDerived3, expression=interf1, reference=false, assignmentAttempt=true), AssignmentStatement(location=rinstDerived4, expression=interf2, reference=false, assignmentAttempt=true), AssignmentStatement(location=rinstBase1, expression=instBase, reference=false, assignmentAttempt=false), AssignmentStatement(location=rinstBase2, expression=instDerived, reference=false, assignmentAttempt=false), IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=rinstBase1, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=rinstBase1, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=interf1, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=interf1, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_ClBaseedu.kit.iti.formal.automation.st.ast.ExpressionList@363ee3a2[
  expressions=java.util.ArrayList@4690b489
].x, expression=Invocation(callee=ClBase_func, parameters=[Invocation.Parameter(name=_SELF, output=false, expression=GVL._INSTANCES_ClBaseedu.kit.iti.formal.automation.st.ast.ExpressionList@79b06cab[
  expressions=java.util.ArrayList@3eb7fc54
])]), reference=false, assignmentAttempt=false)])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=interf1, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=interf1, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_ClBaseedu.kit.iti.formal.automation.st.ast.ExpressionList@7f552bd3[
  expressions=java.util.ArrayList@3c22fc4c
].x, expression=Invocation(callee=ClDerived_func, parameters=[Invocation.Parameter(name=_SELF, output=false, expression=GVL._INSTANCES_ClDerivededu.kit.iti.formal.automation.st.ast.ExpressionList@460d0a57[
  expressions=java.util.ArrayList@47d90b9e
])]), reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[]))])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=rinstBase1, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=rinstBase1, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=interf1, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=interf1, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_ClBaseedu.kit.iti.formal.automation.st.ast.ExpressionList@1184ab05[
  expressions=java.util.ArrayList@3aefe5e5
].x, expression=Invocation(callee=ClBase_func, parameters=[Invocation.Parameter(name=_SELF, output=false, expression=GVL._INSTANCES_ClBaseedu.kit.iti.formal.automation.st.ast.ExpressionList@149e0f5d[
  expressions=java.util.ArrayList@1b1473ab
])]), reference=false, assignmentAttempt=false)])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=interf1, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=interf1, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_ClBaseedu.kit.iti.formal.automation.st.ast.ExpressionList@2f7c2f4f[
  expressions=java.util.ArrayList@6af93788
].x, expression=Invocation(callee=ClDerived_func, parameters=[Invocation.Parameter(name=_SELF, output=false, expression=GVL._INSTANCES_ClDerivededu.kit.iti.formal.automation.st.ast.ExpressionList@ef9296d[
  expressions=java.util.ArrayList@36c88a32
])]), reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[]))]))], elseBranch=StatementList(list=[])), IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=rinstBase2, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=rinstBase2, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=interf2, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=interf2, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_ClBaseedu.kit.iti.formal.automation.st.ast.ExpressionList@7880cdf3[
  expressions=java.util.ArrayList@5be6e01c
].x, expression=Invocation(callee=ClBase_func, parameters=[Invocation.Parameter(name=_SELF, output=false, expression=GVL._INSTANCES_ClBaseedu.kit.iti.formal.automation.st.ast.ExpressionList@1c93084c[
  expressions=java.util.ArrayList@6ef888f6
])]), reference=false, assignmentAttempt=false)])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=interf2, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=interf2, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_ClBaseedu.kit.iti.formal.automation.st.ast.ExpressionList@10e92f8f[
  expressions=java.util.ArrayList@7ce3cb8e
].x, expression=Invocation(callee=ClDerived_func, parameters=[Invocation.Parameter(name=_SELF, output=false, expression=GVL._INSTANCES_ClDerivededu.kit.iti.formal.automation.st.ast.ExpressionList@78b66d36[
  expressions=java.util.ArrayList@5223e5ee
])]), reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[]))])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=rinstBase2, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=rinstBase2, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=interf2, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=interf2, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_ClBaseedu.kit.iti.formal.automation.st.ast.ExpressionList@bef2d72[
  expressions=java.util.ArrayList@69b2283a
].x, expression=Invocation(callee=ClBase_func, parameters=[Invocation.Parameter(name=_SELF, output=false, expression=GVL._INSTANCES_ClBaseedu.kit.iti.formal.automation.st.ast.ExpressionList@22a637e7[
  expressions=java.util.ArrayList@6fe7aac8
])]), reference=false, assignmentAttempt=false)])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=interf2, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=interf2, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_ClBaseedu.kit.iti.formal.automation.st.ast.ExpressionList@1d119efb[
  expressions=java.util.ArrayList@659a969b
].x, expression=Invocation(callee=ClDerived_func, parameters=[Invocation.Parameter(name=_SELF, output=false, expression=GVL._INSTANCES_ClDerivededu.kit.iti.formal.automation.st.ast.ExpressionList@76908cc0[
  expressions=java.util.ArrayList@2473d930
])]), reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[]))]))], elseBranch=StatementList(list=[]))]), programName=MY_PROGRAM), TypeDeclarations(declarations=[SubRangeTypeDeclaration(range=Range(start=Literal(dataType=INT(-1), dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=true), stop=Literal(dataType=INT(-1), dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false)))]), FunctionDeclaration(returnType=INT, functionName=ClBase_func), FunctionDeclaration(returnType=INT, functionName=ClDerived_func), TypeDeclarations(declarations=[StructureTypeDeclaration(fields=LocalScope{x:INT},_INSTANCE_ID:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)}}), StructureTypeDeclaration(fields=LocalScope{_INSTANCE_ID:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)}})])])
