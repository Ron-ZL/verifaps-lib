TopLevelElements(list=[GlobalVariableListDeclaration(), ProgramDeclaration(programBody=StatementList(list=[IfStatement(conditionalBranches=[GuardedStatement(condition=switch, statements=StatementList(list=[AssignmentStatement(location=r, expression=a, reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[AssignmentStatement(location=r, expression=a1, reference=false, assignmentAttempt=false)])), IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_Cedu.kit.iti.formal.automation.st.ast.ExpressionList@7a4ccb53[
  expressions=java.util.ArrayList@309e345f
].z, expression=x, reference=false, assignmentAttempt=false)])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_Cedu.kit.iti.formal.automation.st.ast.ExpressionList@56a6d5a6[
  expressions=java.util.ArrayList@18ce0030
].z, expression=x, reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[])), IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_Cedu.kit.iti.formal.automation.st.ast.ExpressionList@4445629[
  expressions=java.util.ArrayList@45b9a632
].z, expression=BinaryExpression(leftExpr=x, rightExpr=Literal(dataType=INT(-1), dataTypeExplicit=false, token=[@178,439:439='2',<12>,41:17], signed=false), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@2b), reference=false, assignmentAttempt=false)])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=GVL._INSTANCES_Cedu.kit.iti.formal.automation.st.ast.ExpressionList@25d250c6[
  expressions=java.util.ArrayList@4df50bcc
].z, expression=BinaryExpression(leftExpr=x, rightExpr=Literal(dataType=INT(-1), dataTypeExplicit=false, token=[@178,439:439='2',<12>,41:17], signed=false), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@2b), reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[])), IfStatement(conditionalBranches=[GuardedStatement(condition=switch, statements=StatementList(list=[IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=y, expression=GVL._INSTANCES_Cedu.kit.iti.formal.automation.st.ast.ExpressionList@6b26e945[
  expressions=java.util.ArrayList@63a65a25
].z, reference=false, assignmentAttempt=false)])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=y, expression=GVL._INSTANCES_Cedu.kit.iti.formal.automation.st.ast.ExpressionList@54c562f7[
  expressions=java.util.ArrayList@318ba8c8
].z, reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[]))]))], elseBranch=StatementList(list=[IfStatement(conditionalBranches=[GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=y, expression=GVL._INSTANCES_Cedu.kit.iti.formal.automation.st.ast.ExpressionList@6dbb137d[
  expressions=java.util.ArrayList@3c9d0b9d
].z, reference=false, assignmentAttempt=false)])), GuardedStatement(condition=BinaryExpression(leftExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@7bf), rightExpr=BinaryExpression(leftExpr=r, rightExpr=Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='0',<-1>,0:-1], signed=false), operator=edu.kit.iti.formal.automation.operators.ComparisonOperator@781), operator=edu.kit.iti.formal.automation.operators.BinaryOperator@fdb7), statements=StatementList(list=[AssignmentStatement(location=y, expression=GVL._INSTANCES_Cedu.kit.iti.formal.automation.st.ast.ExpressionList@43301423[
  expressions=java.util.ArrayList@2f112965
].z, reference=false, assignmentAttempt=false)]))], elseBranch=StatementList(list=[]))])), AssignmentStatement(location=y, expression=BinaryExpression(leftExpr=y, rightExpr=x, operator=edu.kit.iti.formal.automation.operators.BinaryOperator@2b), reference=false, assignmentAttempt=false)]), programName=MY_PROGRAM), TypeDeclarations(declarations=[SubRangeTypeDeclaration(range=Range(start=Literal(dataType=INT(-1), dataTypeExplicit=false, token=[@-1,0:0='1',<-1>,0:-1], signed=true), stop=Literal(dataType=INT(-1), dataTypeExplicit=false, token=[@-1,0:0='5',<-1>,0:-1], signed=false)))]), TypeDeclarations(declarations=[StructureTypeDeclaration(fields=LocalScope{c1:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)},c2:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)},_INSTANCE_ID:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)}}), StructureTypeDeclaration(fields=LocalScope{_INSTANCE_ID:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)}}), StructureTypeDeclaration(fields=LocalScope{_INSTANCE_ID:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)}}), StructureTypeDeclaration(fields=LocalScope{z:INT},_INSTANCE_ID:_INSTANCE_ID_TYPE := Literal(dataType=_INSTANCE_ID_TYPE, dataTypeExplicit=false, token=[@-1,0:0='-1',<-1>,0:-1], signed=false)}})])])
