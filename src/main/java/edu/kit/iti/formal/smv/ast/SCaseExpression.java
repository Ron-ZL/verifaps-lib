// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package edu.kit.iti.formal.smv.ast;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

import edu.kit.iti.formal.smv.SMVAstVisitor;

/************************************************************/

/**
 *
 */
public class SCaseExpression extends SMVExpr {
    public List<Case> cases = new LinkedList<Case>();

    public void add(SMVExpr condition, SMVExpr value) {
        cases.add(new Case(condition, value));
    }

    /**
     *
     */
    public static class Case {
        /**
         *
         */
        public SMVExpr condition;
        /**
         *
         */
        public SMVExpr then;

        public Case() {
        }

        public Case(SMVExpr cond, SMVExpr var) {
            condition = cond;
            then = var;
        }

        @Override
        public String toString() {
            return ":: " + condition + "->" + then;
        }
    }

    public <T> T accept(SMVAstVisitor<T> visitor) {
        return visitor.visit(this);
    }

    public SMVType getSMVType() {
        List<SMVType> list = cases.stream().map((Case a) -> {
            return a.then.getSMVType();
        }).collect(Collectors.toList());

        return SMVType.infer(list);
    }

    public Case addCase(SMVExpr cond, SMVExpr var) {
        Case c = new Case(cond, var);
        cases.add(c);
        return c;
    }

    @Override
    public String toString() {
        return "if " +
                cases.stream().map(c -> c.toString()).reduce((a, b) -> a + "\n" + b).get()
                + " fi";
    }
}
