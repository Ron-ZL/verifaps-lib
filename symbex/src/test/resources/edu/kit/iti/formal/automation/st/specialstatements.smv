PROGRAM main
    VAR_INPUT  
        i : INT := INT#0;
    END_VAR
    
    VAR_OUTPUT  
        o : INT := INT#0;
    END_VAR
    
    VAR  
        s : INT := INT#0;
    END_VAR
    
    
    //# assume (i > 0)
    IF (i > INT#0) THEN
        s := (s + i);
    END_IF
    IF (s = INT#42) THEN
        //# havoc s
    END_IF
    IF (s < INT#0) THEN
        o := INT#0;
    ELSE
        o := s;
    END_IF
    //# assert (o > 0)
END_PROGRAM

MODULE main(i, __havoc_l12_0)
VAR
    o : signed word[16];
    s : signed word[16];
-- end of VAR
DEFINE
    bc_011_011_ := TRUE & s$00004 = 0sd16_42;
    s$00008 := case
        s$00004 = 0sd16_42 : __havoc_l12_0; 
        TRUE : s$00004; 
    esac;
    bc_007_000_ := TRUE & !(i > 0sd16_0);
    s$00003 := s + i;
    s$00004 := case
        i > 0sd16_0 : s$00003; 
        TRUE : s; 
    esac;
    bc_015_000_ := TRUE & !(s$00008 < 0sd16_0);
    o$00015 := case
        s$00008 < 0sd16_0 : o$00011; 
        TRUE : s$00008; 
    esac;
    o$00011 := 0sd16_0;
    __assume_l6_0 := i > 0sd16_0;
    bc_007_007_ := TRUE & i > 0sd16_0;
    bc_011_000_ := TRUE & !(s$00004 = 0sd16_42);
    bc_015_015_ := TRUE & s$00008 < 0sd16_0;
    __assert_l21_0 := o$00015 > 0sd16_0;

INVARSPEC
    __assert_l21_0


INVAR
    __assume_l6_0

ASSIGN
    init(o) := 0sd16_0;
    init(s) := 0sd16_0;
    next(o) := o$00015;
    next(s) := s$00008;
-- end of module main